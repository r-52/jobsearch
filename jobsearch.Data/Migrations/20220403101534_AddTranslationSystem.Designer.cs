// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using jobsearch.Data;

#nullable disable

namespace jobsearch.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220403101534_AddTranslationSystem")]
    partial class AddTranslationSystem
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("jobsearch.Core.Models.EF.CompanyAgentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.Property<string>("PublicEmail")
                        .HasColumnType("text");

                    b.Property<string>("PublicPhone")
                        .HasColumnType("text");

                    b.Property<int>("Revision")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyAgents");
                });

            modelBuilder.Entity("jobsearch.Core.Models.EF.CompanyEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InstanceId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfileHeadline")
                        .HasColumnType("text");

                    b.Property<string>("ProfileHtmlBody")
                        .HasColumnType("text");

                    b.Property<string>("ProfilePlainBody")
                        .HasColumnType("text");

                    b.Property<int>("Revision")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("jobsearch.Core.Models.EF.InstanceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ExtraCss")
                        .HasColumnType("text");

                    b.Property<string>("Imprint")
                        .HasColumnType("text");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("text");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("text");

                    b.Property<string>("MetaKeywords")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Revision")
                        .HasColumnType("integer");

                    b.Property<string>("Tld")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("Instaces");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2022, 4, 3, 10, 15, 33, 656, DateTimeKind.Utc).AddTicks(9329),
                            Domain = "localhost",
                            ExtraCss = ".empty-class {}",
                            Imprint = "Test",
                            LanguageId = 1,
                            LogoUrl = "",
                            MetaDescription = "MetaDescription",
                            MetaKeywords = "keywords",
                            Name = "Localhost",
                            Revision = 1,
                            Tld = ""
                        });
                });

            modelBuilder.Entity("jobsearch.Core.Models.EF.JobEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BodyHtml")
                        .HasColumnType("text");

                    b.Property<string>("BodyPlain")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExternalApplyUrl")
                        .HasColumnType("text");

                    b.Property<string>("FooterImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("HeadlineHtml")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HeadlinePlain")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("InstanceId")
                        .HasColumnType("integer");

                    b.Property<string>("IntroImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("boolean");

                    b.Property<int>("JobTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("OnlineFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("OnlineTill")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Revision")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.HasIndex("JobTypeId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("jobsearch.Core.Models.EF.JobTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Revision")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("JobTypeEntity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2022, 4, 3, 10, 15, 33, 656, DateTimeKind.Utc).AddTicks(6416),
                            Name = "jobtype.fulltime",
                            Revision = 0
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2022, 4, 3, 10, 15, 33, 656, DateTimeKind.Utc).AddTicks(6420),
                            Name = "jobtype.halfjob",
                            Revision = 0
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2022, 4, 3, 10, 15, 33, 656, DateTimeKind.Utc).AddTicks(6421),
                            Name = "jobtype.minijob",
                            Revision = 0
                        });
                });

            modelBuilder.Entity("jobsearch.Core.Models.EF.LanguageEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2022, 4, 3, 10, 15, 33, 656, DateTimeKind.Utc).AddTicks(8252),
                            Name = "english"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2022, 4, 3, 10, 15, 33, 656, DateTimeKind.Utc).AddTicks(8258),
                            Name = "german"
                        });
                });

            modelBuilder.Entity("jobsearch.Core.Models.EF.TagEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DescriptionTranslationKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("InstanceId")
                        .HasColumnType("integer");

                    b.Property<string>("TitleTranslationKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UsageCount")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("jobsearch.Core.Models.EF.TagUsageEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ForeignKey")
                        .HasColumnType("integer");

                    b.Property<int>("ForeignTableIdentifier")
                        .HasColumnType("integer");

                    b.Property<int>("Revision")
                        .HasColumnType("integer");

                    b.Property<string>("TableIdentifierPlain")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("TagUsages");
                });

            modelBuilder.Entity("jobsearch.Core.Models.EF.TranslationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("Translations");
                });

            modelBuilder.Entity("jobsearch.Core.Models.EF.CompanyAgentEntity", b =>
                {
                    b.HasOne("jobsearch.Core.Models.EF.CompanyEntity", "Company")
                        .WithMany("CompanyAgents")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("jobsearch.Core.Models.EF.CompanyEntity", b =>
                {
                    b.HasOne("jobsearch.Core.Models.EF.InstanceEntity", "Instance")
                        .WithMany()
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instance");
                });

            modelBuilder.Entity("jobsearch.Core.Models.EF.InstanceEntity", b =>
                {
                    b.HasOne("jobsearch.Core.Models.EF.LanguageEntity", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("jobsearch.Core.Models.EF.JobEntity", b =>
                {
                    b.HasOne("jobsearch.Core.Models.EF.InstanceEntity", "Instance")
                        .WithMany()
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("jobsearch.Core.Models.EF.JobTypeEntity", "JobType")
                        .WithMany("jobs")
                        .HasForeignKey("JobTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instance");

                    b.Navigation("JobType");
                });

            modelBuilder.Entity("jobsearch.Core.Models.EF.TagEntity", b =>
                {
                    b.HasOne("jobsearch.Core.Models.EF.InstanceEntity", "Instance")
                        .WithMany()
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instance");
                });

            modelBuilder.Entity("jobsearch.Core.Models.EF.TranslationEntity", b =>
                {
                    b.HasOne("jobsearch.Core.Models.EF.LanguageEntity", "Language")
                        .WithMany("Translations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("jobsearch.Core.Models.EF.CompanyEntity", b =>
                {
                    b.Navigation("CompanyAgents");
                });

            modelBuilder.Entity("jobsearch.Core.Models.EF.JobTypeEntity", b =>
                {
                    b.Navigation("jobs");
                });

            modelBuilder.Entity("jobsearch.Core.Models.EF.LanguageEntity", b =>
                {
                    b.Navigation("Translations");
                });
#pragma warning restore 612, 618
        }
    }
}
