// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using jobsearch.Data;

#nullable disable

namespace jobsearch.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("jobsearch.Core.Models.EF.JobEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BodyHtml")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BodyPlain")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExternalApplyUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FooterImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HeadlineHtml")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HeadlinePlain")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IntroImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("boolean");

                    b.Property<int>("JobTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("OnlineFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("OnlineTill")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Revision")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("JobTypeId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("jobsearch.Core.Models.EF.JobTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Revision")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("JobTypeEntity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2022, 4, 1, 13, 54, 24, 424, DateTimeKind.Utc).AddTicks(1448),
                            Name = "jobtype.fulltime",
                            Revision = 0
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2022, 4, 1, 13, 54, 24, 424, DateTimeKind.Utc).AddTicks(1571),
                            Name = "jobtype.halfjob",
                            Revision = 0
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2022, 4, 1, 13, 54, 24, 424, DateTimeKind.Utc).AddTicks(1676),
                            Name = "jobtype.minijob",
                            Revision = 0
                        });
                });

            modelBuilder.Entity("jobsearch.Core.Models.EF.JobEntity", b =>
                {
                    b.HasOne("jobsearch.Core.Models.EF.JobTypeEntity", "JobType")
                        .WithMany("jobs")
                        .HasForeignKey("JobTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobType");
                });

            modelBuilder.Entity("jobsearch.Core.Models.EF.JobTypeEntity", b =>
                {
                    b.Navigation("jobs");
                });
#pragma warning restore 612, 618
        }
    }
}
